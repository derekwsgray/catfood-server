#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('catfood-server:server');
const http = require('http');
//const fs = require('fs');
const yargs = require('yargs');
const logger = console;

const defaultSettings = {
    port: 3042,
    certKey: '/server/www/keys/catfood-key.pem',
    certChain: '/server/www/keys/chain.pem',
    imageDir: './public/'
};

const catfoodSettings = yargs.env('CATFOOD')
    .option('p', {
        alias: 'port',
        describe: 'Sets the port used by this server.',
        default: defaultSettings.port
    })
    .option('k', {
        alias: 'cert-key',
        describe: 'Path to certification key.',
        default: defaultSettings.certKey
    })
    .option('c', {
        alias: 'cert-chain',
        describe: 'Path to certification chain.',
        default: defaultSettings.certChain
    })
    .argv;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(catfoodSettings.port);
app.set('port', port);

//TODO:
// const certOptions = {
//     key: fs.readFileSync(catfoodSettings.certKey),
//     cert: fs.readFileSync(catfoodSettings.certChain)
// };

/**
 * Create HTTP server.
 */

//const server = https.createServer(certOptions, app);
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);
server.on('listening', onListening);


/**
 * Setup WebSocket
 */
const socketIO = require('socket.io').listen(server);

// WARNING: app.listen(80) will NOT work here!
const ws = require('../routes/ws');


// Development, off Pi
let Gpio = require('pigpio-mock').Gpio;
const StillCameraMock = require('../lib/mock-pi-camera-connect');
let camera = new StillCameraMock();

// Production, on Pi
try {
    Gpio = require('pigpio').Gpio;
    const { StillCamera } = require('pi-camera-connect');
    camera = new StillCamera({
        width: 320,
        height: 240
    });
} catch (e) {
    logger.warn('pigpio module could not be loaded, probably not on a RPi, falling back to mocks.');
}

ws.init(Gpio, camera, socketIO);

server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
